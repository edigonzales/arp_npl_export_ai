import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

//def pathToTempFolder = System.getProperty("java.io.tmpdir")
File tmpFolder = new File("/tmp/gretl-share")
def pathToTempFolder = tmpFolder.getAbsolutePath()

//def landUsePlansDataSets = ["2401", "2403", "2405", "2407", "2408", "2421", "2455", "2456", "2457", "2473", "2474", "2475", "2476", "2479",  "2491", "2492", "2498", "2501", "2502", "2514", "2541", "2546", "2548", "2551", "2573", "2574", "2575", "2580", "2581", "2582", "2586", "2613", "2614", "2615", "2616", "2617", "2621",  "2622"]
//def landUsePlansDataSets = ["2401", "2403", "2405", "2407", "2408", "2421", "2455", "2456", "2457", "2473", "2474", "2475", "2476", "2479",  "2491", "2492", "2498"]
def landUsePlansDataSets = ["2614"]
def landUsePlansBaseUrl = "https://geo.so.ch/geodata/ch.so.arp.nutzungsplanung/"

def iliModelLandUsePlans = "SO_Nutzungsplanung_20171118"
def dbSchemaLandUsePlans = "arp_npl"

def iliModelMgdmHauptnutzung = "Nutzungsplanung_Hauptnutzung_V1_1"
def iliModelMgdmLandUsePlans = "Nutzungsplanung_LV95_V1_1"
def dbSchemaMgdmLandUsePlans = "arp_npl_mgdm"
def mgdmLandUsePlansXtfFileName = "ch.so.arp.npl.mgdm.xtf"
def mgdmLandUsePlansZipFileName = "ch.so.arp.npl.mgdm.zip"

def iliModelMgdmNoiseSensitivityLevels = "Laermempfindlichkeitsstufen_LV95_V1_1"
def dbSchemaMgdmSensitivityLevels = "arp_laermempfindlichkeitsstufen_mgdm"
def mgdmSensitivityLevelsXtfFileName = "ch.so.arp.laerm.mgdm.xtf"
def mgdmSensitivityLevelsZipFileName = "ch.so.arp.laerm.mgdm.zip"


def aiLogin = aiUser + ":" + aiPwd

task createSchemaLandUsePlans(type: SqlExecutor){
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/arp_npl.sql']
}

landUsePlansDataSets.each { landUsePlansDataSet ->
    def dataSet = landUsePlansDataSet.toString()
    task "downloadDataLandUsePlans_$dataSet"(type: Download) {
        src landUsePlansBaseUrl + dataSet + ".xtf"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "replaceDataLandUsePlans_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadDataLandUsePlans_$dataSet") {
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        models = iliModelLandUsePlans
        dbschema = dbSchemaLandUsePlans
        dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceDataLandUsePlans() {
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceDataLandUsePlans_') }
    }
}

task createMgdmSchemaLandUsePlans(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/arp_npl_mgdm.sql']
}

task importHauptnutzung(type: Ili2pgImport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmHauptnutzung
    dbschema = dbSchemaMgdmLandUsePlans
    dataFile = file("Hauptnutzung_CH_V1_1.xml")
    disableValidation = true
}

task createMgdmSchemaNoiseSensitivityLevels(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['schema/arp_laermempfindlichkeitsstufen_mgdm.sql']
}

// GRETL-Job begins here...

// LÃ¤rm

task transferNoiseSensitivityLevels(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['truncate_all_arp_laermempfindlichkeit_mgdm_tables.sql', 'arp_laermempfindlichkeitsstufen_mgdm.sql']
}

task exportMgdmNoiseSensitivityLevels(type: Ili2pgExport, dependsOn: 'transferNoiseSensitivityLevels') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmNoiseSensitivityLevels
    dbschema = dbSchemaMgdmSensitivityLevels
    dataFile = file(mgdmSensitivityLevelsXtfFileName)
    disableValidation = true
}

task validataMgdmNoiseSensitivityLevels(type: IliValidator, dependsOn: 'exportMgdmNoiseSensitivityLevels') {
    dataFiles = [file(mgdmSensitivityLevelsXtfFileName)]
    logFile = "ilivalidator_noisesensitivitylevels.log"
    configFile = "config.toml"
    failOnError = false
}

task zipMgdmNoiseSensitivityLevels(type: Zip, dependsOn: 'validataMgdmNoiseSensitivityLevels'){
    from pathToTempFolder
    from "."
    include mgdmSensitivityLevelsXtfFileName
    include "config.toml"
    archiveName mgdmSensitivityLevelsZipFileName
    destinationDir(file(pathToTempFolder))
}

task uploadMgdmNoiseSensitivityLevels(dependsOn: 'zipMgdmNoiseSensitivityLevels') {
//task uploadMgdmNoiseSensitivityLevels() {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=npl_laermempfindlichkeitsstufen", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmSensitivityLevelsZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
    }
}

// NPL

task transferLandUsePlansData(type: SqlExecutor) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ['truncate_all_arp_npl_mgdm_tables.sql', 'arp_nutzungsplanung_mgdm.sql']
}

task exportMgdmLandUsePlans(type: Ili2pgExport, dependsOn: 'transferLandUsePlansData') {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelMgdmLandUsePlans
    dbschema = dbSchemaMgdmLandUsePlans
    dataFile = file(mgdmLandUsePlansXtfFileName)
    disableValidation = true
}

task validataMgdmLandUsePlans(type: IliValidator, dependsOn: 'exportMgdmLandUsePlans') {
    dataFiles = [file("Hauptnutzung_CH_V1_1.xml"), file(mgdmLandUsePlansXtfFileName)]
    logFile = "ilivalidator_landuseplans.log"
    allObjectsAccessible = true
    configFile = "config.toml"
    failOnError = false
}

task zipMgdmLandUsePlans(type: Zip, dependsOn: 'validataMgdmLandUsePlans'){
    from pathToTempFolder
    from "."
    include mgdmLandUsePlansXtfFileName
    include "config.toml"
    archiveName mgdmLandUsePlansZipFileName
    destinationDir(file(pathToTempFolder))
}

//task uploadMgdmLandUsePlans(dependsOn: 'zipMgdmLandUsePlans') {
task uploadMgdmLandUsePlans() {
    doLast {
        def response = ["curl", "-u", aiLogin, "-F", "topic=npl_nutzungsplanung", "-F",
                        "lv95_file=@" + Paths.get(pathToTempFolder.toString(), mgdmLandUsePlansZipFileName), "-F", "publish=true",
                        "https://" + aiServer + "/data_agg/interlis/import"].execute().text
        println(response)
    }
}
